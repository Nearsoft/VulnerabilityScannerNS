import sys
from lib.utils.dirs import *
from lib.utils.usage import *
from lib.utils.settings import *
from lib.handler.fingerprint import *
from lib.handler.crawler import *
import requests
import json
import urllib2
import socket

path = os.path.join(os.path.abspath('.').split('lib')[0], 'plugins/attacks/')

vulnerabilityObject = {  # This is a scanned vulnerability object
    'Name',  # name of vulnerabilty
    'Vulnerability Status'  # status of vulnerabilty

}

responseObject = {"URL_Tested": "",
                  "IdScann": "",
                  "Results": ""}

vulnerabylitiesResponse = []


class Scanner(object):

    def __init__(self, url, vulnerabilities, idScann, auth_token):
        self.url = url
        self.vulnerabilities = vulnerabilities
        self.id_scann = idScann
        self.auth_token = auth_token

    def start(self):
        vulnerabylitiesResponse = []
        url_status = self.test_url() # Test URL before scanning
        if url_status[0]:
            kwargs = ARGS
            # PTIME(self.url)
            kwargs['auth'] = self.get_cookie_session()
            for file in dirs(path):
                name_file = file.split('.py')[0]
                # result = False
                # at_least_one = False
                if name_file in self.vulnerabilities:
                    # crawler
                    current_url = None
                    result = False
                    url_list = Crawler().run(kwargs, self.url, kwargs['data'])
                    for u in url_list:
                            if "?" not in u:
                                current_url = u + "?id=1"
                            else:
                                current_url = u
                            __import__('plugins.attacks.%s' % name_file)
                            module = sys.modules['plugins.attacks.%s' % name_file]
                            module = module.__dict__[name_file]
                            results_from_attacks = module(kwargs, current_url, kwargs['data']).run()
                            if results_from_attacks is not None and results_from_attacks[0]:
                                status = results_from_attacks[0]
                                payload = results_from_attacks[1]
                            else:
                                status = False
                                payload = None
                            if status:
                                result = True
                                # at_least_one = True
                                current_url = current_url.split("?")[0]
                                vulnerabylitiesResponse.append(
                                    {'Vulnerability': name_file, 'VulnerabilityStatus': result,
                                     'VulnerableUrl': str(current_url), 'Payload': str(payload)})
                            # if at_least_one == False:
                            #     vulnerabylitiesResponse.append(
                            #         {'Vulnerability': name_file, 'VulnerabilityStatus': result,
                            #          'VulnerableUrl': str(u)})
        else:
            vulnerabylitiesResponse.append(
                {'Error': str(url_status[1]), 'Url': str(self.url)})

        print(vulnerabylitiesResponse)
        # CREATE POST
        responseObject = json.dumps(
            {'URL_Tested': str(self.url), 'IdScann': str(self.id_scann), 'Results': vulnerabylitiesResponse})
        print(responseObject)

        correctRequest = False
        while correctRequest == False:
            try:
               headers = {'Content-type': 'application/json', 'Accept': 'text/plain'}
               req = requests.post('http://vulnerabilityscanner_web_1:3000/api/v1/notify', data=responseObject, headers=headers)
               # req = requests.post('http://localhost:5000/', data=responseObject, headers=headers)
               if req.status_code == 200:
                    correctRequest = True
            except requests.exceptions.RequestException as e:
                print("Post Error")

    def get_cookie_session(self):
        session = requests.Session()
        session.get(self.url)
        if str(self.auth_token):
            if bool(session.cookies.get_dict()):
                for name in session.cookies.get_dict():
                    cookie_name = name
                    cookie_auth = cookie_name + "=" + self.auth_token
                    return cookie_auth
            else:
                cookie_auth = None
                return cookie_auth
        else:
            cookie_auth = None
            return cookie_auth

    def test_url(self):
        try:
            hdr = {'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11',
       'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
       'Accept-Charset': 'ISO-8859-1,utf-8;q=0.7,*;q=0.3',
       'Accept-Encoding': 'none',
       'Accept-Language': 'en-US,en;q=0.8',
       'Connection': 'keep-alive'}
            req = urllib2.Request(self.url, headers=hdr)
            urllib2.urlopen(req)
            res = requests.get(self.url) # Request original URL, this could help to correct if the web page has 'www' and the user doesn't add it or vice versa
            self.url = res.url # Assign original URL
            return True, None
        except urllib2.HTTPError, e: # URL doesn't exist
            return False, e
        except socket.error, e:
            return False, e
        except urllib2.URLError, e:
            return False, e
        except ValueError, e: # No protocol in URL
            return False, e
