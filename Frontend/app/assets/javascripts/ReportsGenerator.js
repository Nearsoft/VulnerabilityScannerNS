class ReportsGenerator {

    constructor() {

    }


    getTxtText() {

        let i = 0;
        let text = 'Url: '+$('#url').text();
        text += '\nDate scanned: '+$('#date').text();
        text += '\nSecurity flaws found: '+$('#flawsFound').text();


        while ($('#vulnerability'+i).attr('id')){
            let found = 0;
            let vulnerabilityUrls = '\n\nVulnerable URLs:';
            for (let j = 0; found < parseInt($('#timesRepeated'+i).text()); j++) {
                if ($('#'+i+'flaw'+j).attr('id')) {
                    vulnerabilityUrls += '\n'+$('#'+i+'flaw'+j).text();
                    found ++;
                }
            }
            text += '\n\nVulnerability: '+$('#vulnerability'+i).text()
                +vulnerabilityUrls
                +'\n\nDescription:\n'+$('#description'+i).text()+
                '\n\nHow to prevent it:\n'+$('#prevention'+i).text()+ '\n';
            i++;
        }
        return text;
    }

    getXMLText() {

        let i = 0;
        let text = '<scanned-url>';
        text += '\n\t<url>'+$('#url').text()+'</url>'
        text += '\n\t<date-scanned>'+$('#date').text()+'</date-scanned>';
        text += '\n\t<security-flaws-found>'+$('#flawsFound').text()+'</security-flaws-found>';


        while ($('#vulnerability'+i).attr('id')){
            let found = 0;
            let vulnerabilityUrls = '';
            for (let j = 0; found < parseInt($('#timesRepeated'+i).text()); j++) {
                if ($('#'+i+'flaw'+j).attr('id')) {
                    vulnerabilityUrls += '\n\t\t<vulnerable-url-'+(j+1)+'>'+$('#'+i+'flaw'+j).text()+'</vulnerable-url-'+(j+1)+'>';
                    found ++;
                }
            }
            text += '\n\t<flaw'+(i+1)+'>'+vulnerabilityUrls+
                '\n\t\t<vulnerability>'+$('#vulnerability'+i).text()+'</vulnerability>'
                +'\n\t\t<description>'+$('#description'+i).text()+'</description>'
                +'\n\t\t<prevention>'+$('#prevention'+i).text()+'</prevention>'
                +'\n\t</flaw'+(i+1)+'>';
            i++;
        }
        text += '\n</scanned-url>'
        return text;
    }

    getPDFText() {

        let pdf = new PDFReport(21.59, 1.5, 1.5);
        pdf.drawHeader();

        pdf.doc.setFontSize(15);
        pdf.doc.setTextColor(55 , 71 , 79);
        pdf.doc.text('Scanned url: '+$('#url').text(),  pdf.lMargin , 3);
        pdf.doc.text('Flaws found: '+$('#flawsFound').text(),  pdf.lMargin , 3.7);

        let i = 0;
        let space = 4;
        while ($('#vulnerability'+i).attr('id')){
            pdf.doc.setFontSize(12);
            pdf.doc.setTextColor(55 , 71 , 79);

            let found = 0;
            let vulnerabilityUrls = '';
            for (let j = 0; found < parseInt($('#timesRepeated'+i).text()); j++) {
                if ($('#'+i+'flaw'+j).attr('id')) {
                    vulnerabilityUrls += $('#'+i+'flaw'+j).text()+'\n';
                    found ++;
                }
            }

            const text = '\n\nVulnerability: '+$('#vulnerability'+i).text()
                +'\n\nVulnerable URLs:\n'+vulnerabilityUrls
                +'\n\nDescription:\n'+$('#description'+i).text()+
                '\n\nHow to prevent it:\n'+$('#prevention'+i).text()+ '\n';
            const lines = pdf.doc.splitTextToSize(text, (pdf.docWidth-pdf.lMargin-pdf.rMargin));
            pdf.doc.text(pdf.lMargin,space,lines);
            i++;
            if (pdf.doc.getStringUnitWidth(text) * 15 > 22 && $('#vulnerability'+i).attr('id')) {
                pdf.doc.addPage();
                pdf.drawHeader();
                space = 2;
            }
        }

        return pdf.doc.save('Report'+'.pdf');
    }

}